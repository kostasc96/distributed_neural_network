# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MySchema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LayerMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LayerMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLayerMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LayerMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LayerMessage
    def Layer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LayerMessage
    def ImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LayerMessageStart(builder):
    builder.StartObject(2)

def Start(builder):
    LayerMessageStart(builder)

def LayerMessageAddLayer(builder, layer):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(layer), 0)

def AddLayer(builder, layer):
    LayerMessageAddLayer(builder, layer)

def LayerMessageAddImageId(builder, imageId):
    builder.PrependInt32Slot(1, imageId, 0)

def AddImageId(builder, imageId):
    LayerMessageAddImageId(builder, imageId)

def LayerMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return LayerMessageEnd(builder)
