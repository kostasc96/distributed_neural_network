# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MySchema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NeuronMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NeuronMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNeuronMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NeuronMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NeuronMessage
    def NeuronId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NeuronMessage
    def ImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NeuronMessage
    def Output(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NeuronMessageStart(builder):
    builder.StartObject(3)

def Start(builder):
    NeuronMessageStart(builder)

def NeuronMessageAddNeuronId(builder, neuronId):
    builder.PrependInt32Slot(0, neuronId, 0)

def AddNeuronId(builder, neuronId):
    NeuronMessageAddNeuronId(builder, neuronId)

def NeuronMessageAddImageId(builder, imageId):
    builder.PrependInt32Slot(1, imageId, 0)

def AddImageId(builder, imageId):
    NeuronMessageAddImageId(builder, imageId)

def NeuronMessageAddOutput(builder, output):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(output), 0)

def AddOutput(builder, output):
    NeuronMessageAddOutput(builder, output)

def NeuronMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return NeuronMessageEnd(builder)
